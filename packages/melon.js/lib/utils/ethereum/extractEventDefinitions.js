// @flow
// import { path } from 'ramda';
import SolidityEvent from 'web3/lib/web3/event';

import type { Address } from '../../assets/schemas/Address';

/**
 * Shape of a JSON file generated by truffle
 */
type TruffleJSON = {
  abi: any,
};

type EventDefinition = {
  name: string,
  address: Address,
  hash: string,
  onEvent: Function,
  abi: any,
};

/**
 * Extract event definitions from truffle `json` and mixin `onEventMap`:
 * @example onEventMap = { 'OrderUpdate': doSomething };
 * // will add doSomething to the generated event definition
 */
const extractEventDefinitions = ({
  json,
  // TODO: Reactivate this
  // address = path(['networks', setup.networkId, 'address'], json),
  onEventMap = {},
}: {
  json: TruffleJSON,
  address: Address,
  onEventMap: any,
}): Array<EventDefinition> =>
  json.abi
    .filter(i => i.type === 'event')
    .map(i => ({
      abi: i,
      decoder: new SolidityEvent(null, i, null),
    }))
    .map(({ abi, decoder }) => ({
      name: abi.name,
      // TODO: Reactivate this
      // address,
      hash: `0x${decoder.signature()}`,
      onEvent: onEventMap[abi.name],
      abi,
    }));

export default extractEventDefinitions;
